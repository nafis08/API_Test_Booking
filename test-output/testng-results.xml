<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="32" passed="28" failed="4" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-06-26T00:04:18 CEST" name="Suite" finished-at="2025-06-26T00:04:41 CEST" duration-ms="22973">
    <groups>
    </groups>
    <test started-at="2025-06-26T00:04:18 CEST" name="Test" finished-at="2025-06-26T00:04:41 CEST" duration-ms="22973">
      <class name="test.java.NegativeTestsForGetBookingId">
        <test-method signature="getBookingIds_InvalidCheckinFormat_ShouldReturnEmptyList()[pri:0, instance:test.java.NegativeTestsForGetBookingId@9597028]" started-at="2025-06-26T00:04:40 CEST" name="getBookingIds_InvalidCheckinFormat_ShouldReturnEmptyList" finished-at="2025-06-26T00:04:41 CEST" duration-ms="542" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected empty list for invalid date format. expected [0] but found [56]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected empty list for invalid date format. expected [0] but found [56]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:1431)
at org.testng.Assert.assertEquals(Assert.java:1395)
at test.java.NegativeTestsForGetBookingId.getBookingIds_InvalidCheckinFormat_ShouldReturnEmptyList(NegativeTestsForGetBookingId.java:28)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookingIds_InvalidCheckinFormat_ShouldReturnEmptyList -->
      </class> <!-- test.java.NegativeTestsForGetBookingId -->
      <class name="test.java.NegativeTestsForUpdateBooking">
        <test-method signature="partialUpdateWithInvalidJson()[pri:0, instance:test.java.NegativeTestsForUpdateBooking@49139829]" started-at="2025-06-26T00:04:39 CEST" name="partialUpdateWithInvalidJson" finished-at="2025-06-26T00:04:39 CEST" duration-ms="544" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- partialUpdateWithInvalidJson -->
        <test-method signature="partialUpdateWithoutToken()[pri:0, instance:test.java.NegativeTestsForUpdateBooking@49139829]" started-at="2025-06-26T00:04:39 CEST" name="partialUpdateWithoutToken" finished-at="2025-06-26T00:04:40 CEST" duration-ms="543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- partialUpdateWithoutToken -->
      </class> <!-- test.java.NegativeTestsForUpdateBooking -->
      <class name="test.java.GetToken">
        <test-method signature="createToken()[pri:0, instance:test.java.GetToken@36902638]" started-at="2025-06-26T00:04:18 CEST" name="createToken" finished-at="2025-06-26T00:04:20 CEST" duration-ms="1745" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken -->
      </class> <!-- test.java.GetToken -->
      <class name="test.java.PartialUpdateBooking">
        <test-method signature="partialUpdateBooking()[pri:0, instance:test.java.PartialUpdateBooking@7f3b84b8]" started-at="2025-06-26T00:04:24 CEST" name="partialUpdateBooking" finished-at="2025-06-26T00:04:26 CEST" depends-on-methods="test.java.GetToken.createToken, test.java.CreateBooking.createBooking" duration-ms="1660" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- partialUpdateBooking -->
      </class> <!-- test.java.PartialUpdateBooking -->
      <class name="test.java.CreateBooking">
        <test-method signature="createBooking(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.java.CreateBooking@158d2680]" started-at="2025-06-26T00:04:20 CEST" name="createBooking" data-provider="BookingData" finished-at="2025-06-26T00:04:21 CEST" duration-ms="867" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Francis]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Xxevier]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Rice]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking -->
        <test-method signature="createBooking(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.java.CreateBooking@158d2680]" started-at="2025-06-26T00:04:21 CEST" name="createBooking" data-provider="BookingData" finished-at="2025-06-26T00:04:21 CEST" duration-ms="556" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Rick]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Sorken]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Noodle]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking -->
        <test-method signature="createBooking(java.lang.String,java.lang.String,java.lang.String)[pri:0, instance:test.java.CreateBooking@158d2680]" started-at="2025-06-26T00:04:21 CEST" name="createBooking" data-provider="BookingData" finished-at="2025-06-26T00:04:22 CEST" duration-ms="544" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Danny]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Raegan]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Car]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking -->
      </class> <!-- test.java.CreateBooking -->
      <class name="test.java.GetBookingDetails">
        <test-method signature="getBookingDetails()[pri:0, instance:test.java.GetBookingDetails@6069db50]" started-at="2025-06-26T00:04:41 CEST" name="getBookingDetails" finished-at="2025-06-26T00:04:41 CEST" duration-ms="548" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookingDetails -->
      </class> <!-- test.java.GetBookingDetails -->
      <class name="test.java.SecurityTestForGetBookingDetails">
        <test-method signature="getBooking_XSSInjection_ShouldFail()[pri:0, instance:test.java.SecurityTestForGetBookingDetails@4550bb58]" started-at="2025-06-26T00:04:37 CEST" name="getBooking_XSSInjection_ShouldFail" finished-at="2025-06-26T00:04:37 CEST" duration-ms="547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBooking_XSSInjection_ShouldFail -->
      </class> <!-- test.java.SecurityTestForGetBookingDetails -->
      <class name="test.java.SecurityTestsForGetToken">
        <test-method signature="createToken_SQLInjectionAttempt_ShouldFail()[pri:0, instance:test.java.SecurityTestsForGetToken@5c33f1a9]" started-at="2025-06-26T00:04:30 CEST" name="createToken_SQLInjectionAttempt_ShouldFail" finished-at="2025-06-26T00:04:31 CEST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_SQLInjectionAttempt_ShouldFail -->
        <test-method signature="createToken_WithoutContentTypeHeader_ShouldFailGracefully()[pri:0, instance:test.java.SecurityTestsForGetToken@5c33f1a9]" started-at="2025-06-26T00:04:31 CEST" name="createToken_WithoutContentTypeHeader_ShouldFailGracefully" finished-at="2025-06-26T00:04:31 CEST" duration-ms="543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_WithoutContentTypeHeader_ShouldFailGracefully -->
        <test-method signature="createToken_XSSInjection_ShouldBeHandled()[pri:0, instance:test.java.SecurityTestsForGetToken@5c33f1a9]" started-at="2025-06-26T00:04:31 CEST" name="createToken_XSSInjection_ShouldBeHandled" finished-at="2025-06-26T00:04:32 CEST" duration-ms="543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_XSSInjection_ShouldBeHandled -->
      </class> <!-- test.java.SecurityTestsForGetToken -->
      <class name="test.java.SecurityTestsForBookingCreation">
        <test-method signature="createBooking_SQLInjectionAttempt_ShouldBeHandledSafely()[pri:0, instance:test.java.SecurityTestsForBookingCreation@7f0eb4b4]" started-at="2025-06-26T00:04:29 CEST" name="createBooking_SQLInjectionAttempt_ShouldBeHandledSafely" finished-at="2025-06-26T00:04:30 CEST" duration-ms="543" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_SQLInjectionAttempt_ShouldBeHandledSafely -->
        <test-method signature="createBooking_XSSAttempt_ShouldNotExecuteScript()[pri:0, instance:test.java.SecurityTestsForBookingCreation@7f0eb4b4]" started-at="2025-06-26T00:04:30 CEST" name="createBooking_XSSAttempt_ShouldNotExecuteScript" finished-at="2025-06-26T00:04:30 CEST" duration-ms="554" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Wrong type of JSON expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Wrong type of JSON expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertFalse(Assert.java:79)
at test.java.SecurityTestsForBookingCreation.createBooking_XSSAttempt_ShouldNotExecuteScript(SecurityTestsForBookingCreation.java:51)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_XSSAttempt_ShouldNotExecuteScript -->
      </class> <!-- test.java.SecurityTestsForBookingCreation -->
      <class name="test.java.NegativeTestsForCreateToken">
        <test-method signature="createToken_InvalidPassword_ShouldFail()[pri:0, instance:test.java.NegativeTestsForCreateToken@2b662a77]" started-at="2025-06-26T00:04:27 CEST" name="createToken_InvalidPassword_ShouldFail" finished-at="2025-06-26T00:04:28 CEST" duration-ms="546" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_InvalidPassword_ShouldFail -->
        <test-method signature="createToken_InvalidUsername_ShouldReturn403()[pri:0, instance:test.java.NegativeTestsForCreateToken@2b662a77]" started-at="2025-06-26T00:04:28 CEST" name="createToken_InvalidUsername_ShouldReturn403" finished-at="2025-06-26T00:04:28 CEST" duration-ms="542" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_InvalidUsername_ShouldReturn403 -->
        <test-method signature="createToken_MissingPassword_ShouldReturnError()[pri:0, instance:test.java.NegativeTestsForCreateToken@2b662a77]" started-at="2025-06-26T00:04:28 CEST" name="createToken_MissingPassword_ShouldReturnError" finished-at="2025-06-26T00:04:29 CEST" duration-ms="547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createToken_MissingPassword_ShouldReturnError -->
      </class> <!-- test.java.NegativeTestsForCreateToken -->
      <class name="test.java.UpdateBooking">
        <test-method signature="updateAllBookings()[pri:0, instance:test.java.UpdateBooking@77847718]" started-at="2025-06-26T00:04:22 CEST" name="updateAllBookings" finished-at="2025-06-26T00:04:24 CEST" depends-on-methods="test.java.GetToken.createToken, test.java.CreateBooking.createBooking" duration-ms="2231" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- updateAllBookings -->
      </class> <!-- test.java.UpdateBooking -->
      <class name="test.java.NegativeTestForGetBookingDetails">
        <test-method signature="getBooking_InvalidIdFormat_ShouldReturn404()[pri:0, instance:test.java.NegativeTestForGetBookingDetails@6adbc9d]" started-at="2025-06-26T00:04:36 CEST" name="getBooking_InvalidIdFormat_ShouldReturn404" finished-at="2025-06-26T00:04:36 CEST" duration-ms="550" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBooking_InvalidIdFormat_ShouldReturn404 -->
        <test-method signature="getBooking_NonExistingId_ShouldReturn404()[pri:0, instance:test.java.NegativeTestForGetBookingDetails@6adbc9d]" started-at="2025-06-26T00:04:36 CEST" name="getBooking_NonExistingId_ShouldReturn404" finished-at="2025-06-26T00:04:37 CEST" duration-ms="542" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBooking_NonExistingId_ShouldReturn404 -->
      </class> <!-- test.java.NegativeTestForGetBookingDetails -->
      <class name="test.java.DeleteBooking">
        <test-method signature="deleteBooking()[pri:0, instance:test.java.DeleteBooking@57a3af25]" started-at="2025-06-26T00:04:26 CEST" name="deleteBooking" finished-at="2025-06-26T00:04:27 CEST" depends-on-methods="test.java.GetToken.createToken, test.java.CreateBooking.createBooking" duration-ms="1658" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking -->
      </class> <!-- test.java.DeleteBooking -->
      <class name="test.java.NegativeTestsForDeleteBooking">
        <test-method signature="deleteBooking_InvalidId_ShouldReturn404()[pri:0, instance:test.java.NegativeTestsForDeleteBooking@1623b78d]" started-at="2025-06-26T00:04:32 CEST" name="deleteBooking_InvalidId_ShouldReturn404" finished-at="2025-06-26T00:04:32 CEST" duration-ms="545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking_InvalidId_ShouldReturn404 -->
        <test-method signature="deleteBooking_Twice_ShouldFailSecondTime()[pri:0, instance:test.java.NegativeTestsForDeleteBooking@1623b78d]" started-at="2025-06-26T00:04:32 CEST" name="deleteBooking_Twice_ShouldFailSecondTime" finished-at="2025-06-26T00:04:33 CEST" depends-on-methods="test.java.CreateBooking.createBooking" duration-ms="547" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[First deletion failed. expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: First deletion failed. expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at test.java.NegativeTestsForDeleteBooking.deleteBooking_Twice_ShouldFailSecondTime(NegativeTestsForDeleteBooking.java:62)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking_Twice_ShouldFailSecondTime -->
        <test-method signature="deleteBooking_WithoutToken_ShouldFail()[pri:0, instance:test.java.NegativeTestsForDeleteBooking@1623b78d]" started-at="2025-06-26T00:04:33 CEST" name="deleteBooking_WithoutToken_ShouldFail" finished-at="2025-06-26T00:04:33 CEST" duration-ms="539" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking_WithoutToken_ShouldFail -->
      </class> <!-- test.java.NegativeTestsForDeleteBooking -->
      <class name="test.java.NegativeTestForBookingCreation">
        <test-method signature="createBooking_EmptyBody_ShouldFail()[pri:0, instance:test.java.NegativeTestForBookingCreation@c8c12ac]" started-at="2025-06-26T00:04:33 CEST" name="createBooking_EmptyBody_ShouldFail" finished-at="2025-06-26T00:04:34 CEST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_EmptyBody_ShouldFail -->
        <test-method signature="createBooking_InvalidJsonFormat_ShouldFail()[pri:0, instance:test.java.NegativeTestForBookingCreation@c8c12ac]" started-at="2025-06-26T00:04:34 CEST" name="createBooking_InvalidJsonFormat_ShouldFail" finished-at="2025-06-26T00:04:34 CEST" duration-ms="545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_InvalidJsonFormat_ShouldFail -->
        <test-method signature="createBooking_InvalidPriceType_ShouldFail()[pri:0, instance:test.java.NegativeTestForBookingCreation@c8c12ac]" started-at="2025-06-26T00:04:34 CEST" name="createBooking_InvalidPriceType_ShouldFail" finished-at="2025-06-26T00:04:35 CEST" duration-ms="541" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected failure due to invalid data type. Got: 200 expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected failure due to invalid data type. Got: 200 expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at test.java.NegativeTestForBookingCreation.createBooking_InvalidPriceType_ShouldFail(NegativeTestForBookingCreation.java:42)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_InvalidPriceType_ShouldFail -->
        <test-method signature="createBooking_MissingFirstName_ShouldFail()[pri:0, instance:test.java.NegativeTestForBookingCreation@c8c12ac]" started-at="2025-06-26T00:04:35 CEST" name="createBooking_MissingFirstName_ShouldFail" finished-at="2025-06-26T00:04:36 CEST" duration-ms="541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createBooking_MissingFirstName_ShouldFail -->
      </class> <!-- test.java.NegativeTestForBookingCreation -->
      <class name="test.java.GetBookingIDList">
        <test-method signature="getBookingIDs()[pri:0, instance:test.java.GetBookingIDList@223191a6]" started-at="2025-06-26T00:04:38 CEST" name="getBookingIDs" finished-at="2025-06-26T00:04:39 CEST" duration-ms="573" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getBookingIDs -->
      </class> <!-- test.java.GetBookingIDList -->
      <class name="test.java.SecurityTestForDeleteBooking">
        <test-method signature="deleteBooking_InvalidToken_ShouldBeForbidden()[pri:0, instance:test.java.SecurityTestForDeleteBooking@4ec4f3a0]" started-at="2025-06-26T00:04:37 CEST" name="deleteBooking_InvalidToken_ShouldBeForbidden" finished-at="2025-06-26T00:04:38 CEST" duration-ms="539" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking_InvalidToken_ShouldBeForbidden -->
        <test-method signature="deleteBooking_XSSAttempt_ShouldNotSucceed()[pri:0, instance:test.java.SecurityTestForDeleteBooking@4ec4f3a0]" started-at="2025-06-26T00:04:38 CEST" name="deleteBooking_XSSAttempt_ShouldNotSucceed" finished-at="2025-06-26T00:04:38 CEST" duration-ms="547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteBooking_XSSAttempt_ShouldNotSucceed -->
      </class> <!-- test.java.SecurityTestForDeleteBooking -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
